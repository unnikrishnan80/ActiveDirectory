using System;
using System.Collections.Generic;
using System.Text;
using System.DirectoryServices;
namespace ReturnManagementSystem_Web.Utils
{
    public class ActiveDirectoryValidator
    {
       
            private string _path;
            private string _filterAttribute;

            public ActiveDirectoryValidator(string path)
            {
                _path = path;
            }

            public bool IsAuthenticated(string domainName, string userName, string password)
            {
                string parameters = "DomainName: " + domainName + ",UserName: " + userName + ",Password: ";
                CommonFunction.SaveExecutionLogger("ActiveDirectoryValidator", "IsAuthenticated", "Check parameters", parameters);
                string domainAndUsername = domainName + @"\" + userName;
            // DirectoryEntry entry = new DirectoryEntry(_path, domainAndUsername, password);
               DirectoryEntry entry = new DirectoryEntry(domainName, userName, password);
               try
                {
                    // Bind to the native AdsObject to force authentication.
                    Object obj = entry.NativeObject;
                    DirectorySearcher search = new DirectorySearcher(entry);
                    search.Filter = "(SAMAccountName=" + userName + ")";
                    search.PropertiesToLoad.Add("cn");
                    SearchResult result = search.FindOne();
                    if (null == result)
                    {
                        CommonFunction.SaveExecutionLogger("ActiveDirectoryValidator", "IsAuthenticated", "Result is NULL", "User not present in AD");
                        return false;
                    }
                    // Update the new path to the user in the directory
                    _path = result.Path;
                    _filterAttribute = (String)result.Properties["cn"][0];
                }
                catch (Exception ex)
                {
                    CommonFunction.SaveExecutionLogger("ActiveDirectoryValidator", "IsAuthenticated", "AD Error", ex.Message);
                    return false;
                    ///throw new Exception(ex.Message);
                }
                CommonFunction.SaveExecutionLogger("ActiveDirectoryValidator", "IsAuthenticated", "AD valid", "User not present in AD");
                return true;
            }

        }
    }
